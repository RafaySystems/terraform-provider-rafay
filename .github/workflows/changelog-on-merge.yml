name: Update Changelog on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - master
      - 'v*'  # Release branches like v1.2.0, v1.3.0, etc.

permissions:
  contents: write
  pull-requests: read

jobs:
  update-changelog:
    # Only run if PR was actually merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Get full history for commit analysis
          ref: ${{ github.event.pull_request.base.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Python dependencies
        run: |
          pip install -r scripts/requirements.txt
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      
      - name: Granting private modules access
        env:
          TOKEN: ${{ secrets.RCTL_GO_MODULES_TOKEN }}
        run: git config --global url."https://stephan-rafay:${TOKEN}@github.com".insteadOf "https://github.com"
      
      - name: Build deprecation scanner
        run: |
          cd scripts
          go build -o scan-deprecations scan-deprecations.go
          chmod +x scan-deprecations
      
      - name: Scan for deprecations in PR
        id: scan_deprecations
        run: |
          # Get list of changed Go files in this PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          # Get changed files
          git diff --name-only ${BASE_SHA}...${HEAD_SHA} | grep '\.go$' > changed_files.txt || true
          
          if [ -s changed_files.txt ]; then
            echo "Scanning $(wc -l < changed_files.txt) changed Go file(s) for deprecations..."
            
            # Create temp directory for changed files
            mkdir -p /tmp/pr_files
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                mkdir -p "/tmp/pr_files/$(dirname $file)"
                cp "$file" "/tmp/pr_files/$file"
              fi
            done < changed_files.txt
            
            # Scan the changed files
            ./scripts/scan-deprecations -path /tmp/pr_files -output deprecations.json -verbose
          else
            echo "No Go files changed in this PR"
            echo '{"deprecations":[]}' > deprecations.json
          fi
      
      - name: Determine target section
        id: target_section
        run: |
          BRANCH="${{ github.event.pull_request.base.ref }}"
          if [ "$BRANCH" = "master" ] || [ "$BRANCH" = "main" ]; then
            echo "section=Unreleased" >> $GITHUB_OUTPUT
            echo "Target section: Unreleased (master branch)"
          else
            # Extract version from branch name (e.g., v1.2.0 -> 1.2.0)
            VERSION=$(echo "$BRANCH" | sed 's/^v//')
            echo "section=${VERSION}" >> $GITHUB_OUTPUT
            echo "Target section: ${VERSION} (release branch)"
          fi
      
      - name: Generate changelog entries
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_URL=${{ github.event.pull_request.html_url }}
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          TARGET_SECTION="${{ steps.target_section.outputs.section }}"
          
          echo "Generating changelog for PR #${PR_NUMBER}"
          echo "Commits: ${BASE_SHA}...${HEAD_SHA}"
          echo "Target section: ${TARGET_SECTION}"
          
          python3 scripts/generate-changelog.py \
            --pr-number ${PR_NUMBER} \
            --pr-url "${PR_URL}" \
            --base-ref ${BASE_SHA} \
            --head-ref ${HEAD_SHA} \
            --target-section "${TARGET_SECTION}" \
            --deprecations-file deprecations.json \
            --changelog-path CHANGELOG.md
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Commit and push changelog
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            git add CHANGELOG.md
            git commit -m "chore: Update CHANGELOG for PR #${{ github.event.pull_request.number }}\n\nAuto-generated changelog entry for merged PR.\n\nPR: ${{ github.event.pull_request.html_url }}\n[skip ci]"
            git push origin ${{ github.event.pull_request.base.ref }}
            echo "✓ CHANGELOG.md updated and pushed"
          fi
      
      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const targetSection = '${{ steps.target_section.outputs.section }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `✅ **Changelog Updated**\n\nThis PR has been automatically added to the \`${targetSection}\` section of the [CHANGELOG.md](${context.payload.repository.html_url}/blob/${{ github.event.pull_request.base.ref }}/CHANGELOG.md).`
            });
      
      - name: Handle errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `⚠️ **Changelog Update Failed**\n\nThere was an error automatically updating the CHANGELOG. Please update it manually or contact a maintainer.\n\nWorkflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}`
            });

