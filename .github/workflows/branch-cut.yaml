name: Release Branch Cut Workflow

on:
  workflow_dispatch:  # manually trigger the workflow
    inputs:
      source_branch:
        description: 'Source branch name from which branch cut need to be done.'
        required: true
        default: master
      release_branch:
        description: 'New branch release branch name'
        required: true

jobs:
  branch-cut:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR Branch
      uses: actions/checkout@v4  # This action checks out the branch associated with the PR
      with:
        token: ${{ secrets.JENKINS_PAT }}

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Create new branch
      run: |
        git fetch --all
        if [ "${{ github.event.inputs.source_branch }}" == 'main|master' ] || [ "${{ github.event.inputs.source_branch }}" == 'master|main' ]; then
            SOURCE_BRANCH='master'
            echo source_branch=$SOURCE_BRANCH
        else 
            SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
            echo source_branch=$SOURCE_BRANCH
        fi
        git checkout -b ${{ github.event.inputs.release_branch }} origin/$SOURCE_BRANCH
        git push origin HEAD:${{ github.event.inputs.release_branch }}
    
    - name: Update CHANGELOG for release branch
      run: |
        RELEASE_BRANCH="${{ github.event.inputs.release_branch }}"
        # Remove 'v' prefix if present (e.g., v1.2.0 -> 1.2.0)
        VERSION=$(echo "$RELEASE_BRANCH" | sed 's/^v//')
        
        echo "Updating CHANGELOG.md for version ${VERSION}"
        
        # Update CHANGELOG on release branch
        git checkout ${{ github.event.inputs.release_branch }}
        
        if [ -f "CHANGELOG.md" ]; then
          # Rename Unreleased to version number
          chmod +x scripts/update-unreleased.sh
          bash scripts/update-unreleased.sh rename "${VERSION}" CHANGELOG.md
          
          git add CHANGELOG.md
          git commit -m "chore: Prepare CHANGELOG for ${VERSION} release\n\n[skip ci]" || echo "No changes to commit"
          git push origin ${{ github.event.inputs.release_branch }}
          echo "âœ“ Updated CHANGELOG on release branch ${RELEASE_BRANCH}"
        else
          echo "Warning: CHANGELOG.md not found"
        fi
